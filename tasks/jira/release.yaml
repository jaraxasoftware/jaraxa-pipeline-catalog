apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  creationTimestamp: null
  name: git-clone
spec:
  stepTemplate:
    env:
    - name: HOME
      value: /tekton/home
    envFrom:
    - secretRef:
        name: jx-boot-job-env-vars
        optional: true
    name: ""
    resources: {}
  steps:
  - image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.27.0
    name: git-history
    resources: {}
    script: |
      #!/bin/sh
      git fetch --prune --unshallow --tags
  - image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.27.0
    name: collect-issues
    resources: {}
    script: |
      #!/bin/sh
      export LC_ALL=en_US.utf8
      git log $(git describe --abbrev=0 --tags 2> /dev/null || git rev-list --max-parents=0 HEAD)..HEAD | \
        grep -oE "${JIRA_PROJECT}-[[:digit:]]{1,}" | sort | uniq | \
        sed 's/^\|$/"/g' | paste -sd , - | awk '{print "RELATED_JIRA_ISSUES="$0}' >> $GITHUB_ENV
  - image: gcr.io/tekton-releases/github.com/tektoncd/pipeline/cmd/git-init:v0.27.0
    name: invoke-jira-webhook
    resources: {}
    script: |
      #!/bin/sh
      $json = ConvertTo-Json @{issues = @(${{ env.RELATED_JIRA_ISSUES }}); data = @{version = "${{ inputs.build-version }}"; projectName = "${{ inputs.jira-project-key }}"}}
      [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12
      Invoke-RestMethod ${{ inputs.jira-automation-webhook }} -Method Post -Body $json -ContentType "application/json"      
    workingDir: /workspace
  workspaces:
  - description: The git repo will be cloned onto the volume backing this workspace
    mountPath: /workspace
    name: output
