apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  creationTimestamp: null
  name: pullrequest
spec:
  pipelineSpec:
    tasks:
    - name: from-build-pack
      resources: {}
      taskSpec:
        metadata: {}
        stepTemplate:
          env:
          - name: NPM_CONFIG_USERCONFIG
            value: /tekton/home/npm/.npmrc
          - name: HOME
            value: /tekton/home
          envFrom:
          - secretRef:
              name: jx-boot-job-env-vars
              optional: true
          name: ""
          resources:
            limits: {}
          workingDir: /workspace/source
        steps:
        - image: ghcr.io/jenkins-x/jx-boot:3.11.78
          name: jx-variables
          resources:
            # set requests for the pod here
            requests:
              cpu: 400m
              memory: 512Mi
          script: |
            #!/usr/bin/env sh
            jx gitops variables
            jx gitops pr variables
        - image: node:18-slim
          name: build-npm-install
          resources: {}
          script: |
            #!/bin/sh
            npm install
        - image: node:18-slim
          name: build-npm-test
          resources: {}
          script: |
            #!/bin/sh
            CI=true DISPLAY=:99 npm run test:run
        - image: sonarsource/sonar-scanner-cli:11.0
          name: sonar-code-analisys
          resources: {}
          script: |
            #!/bin/bash
            source .jx/variables.sh
            sonar-scanner \
              -Dsonar.projectName=$APP_NAME \
              -Dsonar.token=$SONAR_TOKEN \
              -Dsonar.host.url=$SONAR_URL \
              -Dsonar.projectKey=$SONAR_PROJECT_KEY \
              -Dsonar.branch.name=$PULL_BASE_REF \
              -Dsonar.exclusions=$SONAR_EXCLUSIONS \
              -Dsonar.maven.scanAll=true \
              -Dsonar.javascript.node.maxspace=8192
        - image: sonarsource/sonar-scanner-cli:11.0
          name: sonar-code-analisys-pr
          resources: {}
          script: |
            #!/bin/bash
            source .jx/variables.sh
            sonar-scanner \
              -Dsonar.projectName=$APP_NAME \
              -Dsonar.token=$SONAR_TOKEN \
              -Dsonar.host.url=$SONAR_URL \
              -Dsonar.projectKey=$SONAR_PROJECT_KEY \
              -Dsonar.exclusions=$SONAR_EXCLUSIONS \
              -Dsonar.pullrequest.key=$PULL_NUMBER \
              -Dsonar.pullrequest.branch=$PR_HEAD_REF \
              -Dsonar.pullrequest.base=$PULL_BASE_REF \
              -Dsonar.scm.revision=$PR_HEAD_SHA \
              -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
              -Dsonar.javascript.node.maxspace=8192
        - image: aquasec/trivy:latest
          name: vulnscan
          resources: {}
          script: |
            # Scan all for reporting in pipeline
            trivy fs . --scanners vuln --include-dev-deps --format json --db-repository public.ecr.aws/aquasecurity/trivy-db:2 --output /workspace/source/scanresults.json
        - image: ghcr.io/jenkins-x/jx-boot:3.11.78
          name: comment-pr
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh
            apk add jq
            SUMMARY=$(jq -r '.Results[]?.Vulnerabilities[]? | "ID: \(.VulnerabilityID), Severity: \(.Severity), Package: \(.PkgName). Installed: \(.InstalledVersion), Fixed: [\(.FixedVersion)]"' /workspace/source/scanresults.json)
            if jq -e '.Results[]?.Vulnerabilities[]? | select(.Severity == "HIGH" or .Severity == "CRITICAL")' /workspace/source/scanresults.json > /dev/null; then
              echo "Vulnerabilities of level HIGH or CRITICAL found."
              jx gitops pr comment -c ":warning: **High or critical vulnerabilities were found** :warning: <br><br>$SUMMARY <br><br>Pipeline stopped until dependencies are upgraded."
              exit 1
            elif [ -n "$SUMMARY" ]; then
              echo "No vulnerabilities of level HIGH or CRITICAL found, but other vulnerabilities exist."
              jx gitops pr comment -c "No critical or high vulnerabilities found. <br><br>$SUMMARY <br><br>Please consider upgrading dependencies."
              exit 0
            else
              echo "No vulnerabilities found."
              exit 0
            fi
        - image: ghcr.io/jenkins-x/jx-registry:0.1.10
          name: check-registry
          resources: {}
        - image: gcr.io/kaniko-project/executor:v1.23.0-debug
          name: build-container-build
          resources: {}
          script: |
            #!/busybox/sh
            source .jx/variables.sh
            cp /tekton/creds-secrets/tekton-container-registry-auth/.dockerconfigjson /kaniko/.docker/config.json
            /kaniko/executor $KANIKO_FLAGS --context=/workspace/source --dockerfile=${DOCKERFILE_PATH:-Dockerfile} --destination=$PUSH_CONTAINER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME:$VERSION
        - image: ghcr.io/jenkins-x-plugins/jx-preview:0.4.7
          name: promote-jx-preview
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh
            jx preview create
        volumes:
        - name: npmrc
          secret:
            optional: true
            secretName: npmrc
  podTemplate: {}
  serviceAccountName: tekton-bot
  timeout: 12h0m0s
status: {}
