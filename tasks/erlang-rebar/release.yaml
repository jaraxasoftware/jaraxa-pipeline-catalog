apiVersion: tekton.dev/v1beta1
kind: PipelineRun
metadata:
  creationTimestamp: null
  name: release
spec:
  pipelineSpec:
    tasks:
    - name: from-build-pack
      resources: {}
      taskSpec:
        metadata: {}
        stepTemplate:
          env:
          - name: HOME
            value: /tekton/home        
          envFrom:
          - secretRef:
              name: jx-boot-job-env-vars
              optional: true
          name: ""
          resources:
            limits: {}            
          volumeMounts:
          - mountPath: /root/.gnupg
            name: release-gpg         
          workingDir: /workspace/source
        steps:
        - env:
          - name: GIT_TOKEN
            valueFrom:
              secretKeyRef:
                key: password
                name: tekton-git          
          - name: GIT_USER
            valueFrom:
              secretKeyRef:
                key: username
                name: tekton-git
          image: ghcr.io/jenkins-x/jx-release-version:2.5.0
          name: next-version
          resources: {}
          script: |
            #!/usr/bin/env sh
            jx-release-version --tag --debug > VERSION
        - image: ghcr.io/jenkins-x/jx-release-version:2.6.0
          name: next-version-uat
          script: |
            #!/usr/bin/env sh
            jx-release-version -debug -next-version=semantic:strip-prerelease -output-format "{{.Major}}.{{.Minor}}.{{.Patch}}"-UAT-$BUILD_ID > VERSION            
        - image: ghcr.io/jenkins-x/jx-boot:3.5.4
          name: jx-variables
          resources: {}
          script: |
            #!/usr/bin/env sh
            jx gitops variables
        - image: erlang:21.3.8.11
          name: build-erlang-develop
          resources: {}
          script: |
            #!/bin/bash
            source .jx/variables.sh
            git config --global url."https://".insteadOf git://
            rebar3 release --relvsn $VERSION --relname $APP_NAME --output-dir ./
        - image: erlang:21.3.8.11
          name: build-erlang-release
          resources: {}
          script: |
            #!/bin/bash
            source .jx/variables.sh
            git config --global url."https://".insteadOf git://            
            rebar3 as $REBAR_RELEASE release --output-dir ./
        - image: erlang:21.3.8.11
          name: eunit-tests
          resources: {}
          script: |
            #!/bin/bash
            source .jx/variables.sh
            git config --global url."https://".insteadOf git://
            ERL_FLAGS="-config $SONAR_TESTS_CONFIG" rebar3 eunit
        - image: sonarsource/sonar-scanner-cli:4.7.0
          name: sonar-code-analisys
          resources: {}
          script: |
            #!/bin/bash
            source .jx/variables.sh
            export SONAR_TOKEN=$SONAR_TOKEN
            sonar-scanner \
              -Dsonar.projectKey=$SONAR_PROJECT_KEY \
              -Dsonar.exclusions=$SONAR_EXCLUSIONS \
              -Dsonar.sourceEncoding=UTF-8 \
              -Dsonar.sources=. \
              -Dsonar.projectVersion=$VERSION \
              -Dsonar.host.url=$SONAR_URL
        - image: ghcr.io/jenkins-x/jx-registry:0.1.1
          name: check-registry
          resources: {}
        - image: gcr.io/kaniko-project/executor:v1.6.0-debug
          name: build-container-build
          resources: {}
          script: |
            #!/busybox/sh
            source .jx/variables.sh
            cp /tekton/creds-secrets/tekton-container-registry-auth/.dockerconfigjson /kaniko/.docker/config.json
            /kaniko/executor $KANIKO_FLAGS \
              --context=/workspace/source \
              --dockerfile=${DOCKERFILE_PATH:-Dockerfile} \
              --destination=$PUSH_CONTAINER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME:$VERSION
        - image: ghcr.io/jenkins-x/jx-changelog:0.3.0
          name: promote-changelog-uat
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh

            if [ -d "charts/$REPO_NAME" ]; then
            jx gitops yset -p version -v "$VERSION" -f ./charts/$REPO_NAME/Chart.yaml
            jx gitops yset -p appVersion -v "$VERSION" -f ./charts/$REPO_NAME/Chart.yaml
            jx gitops yset -p 'image.repository' -v $DOCKER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME -f ./charts/$REPO_NAME/values.yaml
            jx gitops yset -p 'image.tag' -v "$VERSION" -f ./charts/$REPO_NAME/values.yaml;
            else echo no charts; fi

            git add * || true
            git commit -a -m "Pre-release $VERSION" --allow-empty
            git tag -fa v$VERSION -m "Pre-release version $VERSION"
            git push --force origin v$VERSION

            jx changelog create --prerelease --version v${VERSION}       
        - image: ghcr.io/jenkins-x/jx-changelog:0.3.0
          name: promote-changelog
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh

            if [ -d "charts/$REPO_NAME" ]; then
            jx gitops yset -p version -v "$VERSION" -f ./charts/$REPO_NAME/Chart.yaml
            jx gitops yset -p appVersion -v "$VERSION" -f ./charts/$REPO_NAME/Chart.yaml
            jx gitops yset -p 'image.repository' -v $DOCKER_REGISTRY/$DOCKER_REGISTRY_ORG/$APP_NAME -f ./charts/$REPO_NAME/values.yaml
            jx gitops yset -p 'image.tag' -v "$VERSION" -f ./charts/$REPO_NAME/values.yaml;
            else echo no charts; fi

            git add * || true
            git commit -a -m "chore: release $VERSION" --allow-empty
            git tag -fa v$VERSION -m "Release version $VERSION"
            git push --force origin v$VERSION

            jx changelog create --version v${VERSION}            
        - env:
          - name: GITHUB_TOKEN
            valueFrom:
              secretKeyRef:
                key: oauth
                name: lighthouse-oauth-token          
          image: golang:1.15
          name: upload-artifacts-release
          resources: {}
          script: |
            #!/usr/bin/env bash
            source .jx/variables.sh
            set +x            
            
            go get github.com/github-release/github-release
            github-release upload \
              --user $REPO_OWNER \
              --repo $REPO_NAME \
              --tag v${VERSION} \
              --name "$REPO_NAME-linux-amd64" \
              --file $ARTIFACT-$VERSION
        - image: ghcr.io/jenkins-x/jx-boot:3.5.4
          name: promote-helm-release
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh
            jx gitops helm release --version $VERSION
        - image: ghcr.io/jenkins-x-plugins/jx-promote:0.1.0
          name: promote-jx-promote
          resources: {}
          script: |
            #!/usr/bin/env sh
            source .jx/variables.sh
            jx promote -b --all --timeout 1h --version $VERSION --no-poll
        volumes:
        - name: release-gpg
          secret:
            optional: true
            secretName: jenkins-release-gpg      
        workspaces:
          - name: source
            description: |
              Default Workspace
            optional: false
            mountPath: /workspace/source 
  serviceAccountName: tekton-bot
  timeout: 12h0m0s
status: {}
